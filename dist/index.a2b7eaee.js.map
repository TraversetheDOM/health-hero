{"mappings":"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","sources":["<anon>","src/js/main.js"],"sourcesContent":["var $54b47fc030b7b21e$exports = {};\n// Here I want to initialize all the constants I will be working with.\nconst $54b47fc030b7b21e$var$CM_TO_M = 1e2;\nconst $54b47fc030b7b21e$var$EXPONENT = 2;\nconst $54b47fc030b7b21e$var$STONE_TO_POUNDS = 14;\nconst $54b47fc030b7b21e$var$POUNDS_TO_KILOGRAMS = 0.45359237;\nconst $54b47fc030b7b21e$var$FOOT_TO_INCHES = 12;\nconst $54b47fc030b7b21e$var$INCH_TO_METERS = 0.0254;\nconst $54b47fc030b7b21e$var$M_TO_FEET = 3.28084;\nconst $54b47fc030b7b21e$var$BMI_CONSTANT = 703;\nconst $54b47fc030b7b21e$var$METRIC = \"metric\";\nconst $54b47fc030b7b21e$var$IMPERIAL = \"imperial\";\n// Making use of Object-Oriented-Programming, I will be creating an objects that will group the BMI classification and the ranges\nclass $54b47fc030b7b21e$var$BmiCategoryRange {\n    constructor(category, min, max){\n        this.category = category;\n        this.minBmi = min;\n        this.maxBmi = max;\n    }\n}\nconst $54b47fc030b7b21e$var$underWeight = new $54b47fc030b7b21e$var$BmiCategoryRange(\"underweight\", -Infinity, 18.5);\nconst $54b47fc030b7b21e$var$healthyWeight = new $54b47fc030b7b21e$var$BmiCategoryRange(\"healthy weight\", 18.5, 24.9);\nconst $54b47fc030b7b21e$var$overWeight = new $54b47fc030b7b21e$var$BmiCategoryRange(\"overweight\", 25, 29.9);\nconst $54b47fc030b7b21e$var$obese = new $54b47fc030b7b21e$var$BmiCategoryRange(\"obese\", 30, Infinity);\n// I need to create a list of the ranges and their categories in an array. So an array of objects.\nconst $54b47fc030b7b21e$var$bmiCategories = [\n    $54b47fc030b7b21e$var$underWeight,\n    $54b47fc030b7b21e$var$healthyWeight,\n    $54b47fc030b7b21e$var$overWeight,\n    $54b47fc030b7b21e$var$obese\n];\n// Create a function that does the conversion of the metric units to kg and meters\nfunction $54b47fc030b7b21e$var$metricKgM(kilogram, centimeters) {\n    const kilograms = parseFloat(kilogram.toFixed(1));\n    const meters = parseFloat((centimeters / $54b47fc030b7b21e$var$CM_TO_M).toFixed(2));\n    return new $54b47fc030b7b21e$var$Metric(kilograms, meters);\n}\n// Create a function that does the conversion of the imperial units to hg and metres.\nfunction $54b47fc030b7b21e$var$imperialKgM(stone, pounds, feet, inches) {\n    const kilograms = parseFloat(((stone * $54b47fc030b7b21e$var$STONE_TO_POUNDS + pounds) * $54b47fc030b7b21e$var$POUNDS_TO_KILOGRAMS).toFixed(1));\n    const meters = parseFloat(((feet * $54b47fc030b7b21e$var$FOOT_TO_INCHES + inches) * $54b47fc030b7b21e$var$INCH_TO_METERS).toFixed(2));\n    return new $54b47fc030b7b21e$var$Imperial(kilograms, meters);\n}\n// Create a base class called Units since The Metric class and the Imperial but have some common functionalities\nclass $54b47fc030b7b21e$var$Units {\n    constructor(weight, height){\n        this._weight = weight;\n        this._height = height;\n        this._calcBMI();\n        this._getWeightClassification();\n    }\n    _calcBMI() {\n        this.BMI = parseFloat((this._weight / this._height ** $54b47fc030b7b21e$var$EXPONENT).toFixed(1));\n    }\n    _getBmiCategory() {\n        for (const bmiCategory of $54b47fc030b7b21e$var$bmiCategories){\n            if ((bmiCategory.minBmi === -Infinity || this.BMI >= bmiCategory.minBmi) && (bmiCategory.maxBmi === Infinity || this.BMI <= bmiCategory.maxBmi)) return bmiCategory;\n        }\n    }\n    _getWeightClassification() {\n        const bmiCategory = this._getBmiCategory();\n        this.classification = bmiCategory.category;\n    }\n    _getIdealWeightRangesInKgs() {\n        const bmiCategory = this._getBmiCategory();\n        const minIdealWeightInKg = bmiCategory.minBMI === -Infinity ? null : parseFloat((bmiCategory.minBmi * this._height ** $54b47fc030b7b21e$var$EXPONENT).toFixed(1));\n        const maxIdealWeightInKg = parseFloat(bmiCategory.maxBMI === Infinity ? null : (bmiCategory.maxBmi * this._height ** $54b47fc030b7b21e$var$EXPONENT).toFixed(1));\n        this._idealWeightRangesInKgs = new Array(minIdealWeightInKg, maxIdealWeightInKg);\n        return this._idealWeightRangesInKgs;\n    }\n}\n// Metric\nclass $54b47fc030b7b21e$var$Metric extends $54b47fc030b7b21e$var$Units {\n    constructor(weight, height){\n        super(weight, height);\n        this.#getIdealWeightMessage();\n    }\n    #getIdealWeightMessage() {\n        if (this.classification == $54b47fc030b7b21e$var$underWeight.category) this.idealWeightMessage = `${this._getIdealWeightRangesInKgs()[1]}kgs and below`;\n        else if (this.classification == $54b47fc030b7b21e$var$obese.category) this.idealWeightMessage = `${this._getIdealWeightRangesInKgs()[0]}kgs and above`;\n        else this.idealWeightMessage = `${this._getIdealWeightRangesInKgs()[0]}kgs - ${this._getIdealWeightRangesInKgs()[1]}kgs`;\n    }\n}\n// Imperial\nclass $54b47fc030b7b21e$var$Imperial extends $54b47fc030b7b21e$var$Units {\n    #feet;\n    #inches;\n    #idealWeightRangesInStLbs;\n    constructor(weight, height){\n        super(weight, height);\n        this.#imperialHeightFtIn();\n        this.#getIdealWeightRangesInStAndLbs();\n        this.#getIdealWeightMessage();\n    }\n    #imperialHeightFtIn() {\n        const heightInFeet = this._height * $54b47fc030b7b21e$var$M_TO_FEET;\n        // We need to extract the whole number of feet and the remaining inches\n        this.#feet = Math.floor(heightInFeet);\n        this.#inches = Math.round((heightInFeet - this.#feet) * $54b47fc030b7b21e$var$FOOT_TO_INCHES);\n    }\n    #getIdealWeightRangesInStAndLbs() {\n        const bmiCategory = this._getBmiCategory();\n        // Convert the height to inches\n        const heightInInches = this.#feet * $54b47fc030b7b21e$var$FOOT_TO_INCHES + this.#inches;\n        // Calculate the minimum and maximum ideal weights in pounds\n        const minIdealWeightInPounds = bmiCategory.minBmi === -Infinity ? null : Math.trunc(bmiCategory.minBmi * Math.pow(heightInInches, $54b47fc030b7b21e$var$EXPONENT) / $54b47fc030b7b21e$var$BMI_CONSTANT % $54b47fc030b7b21e$var$STONE_TO_POUNDS);\n        const maxIdealWeightInPounds = bmiCategory.maxBmi === Infinity ? null : Math.trunc(bmiCategory.maxBmi * Math.pow(heightInInches, $54b47fc030b7b21e$var$EXPONENT) / $54b47fc030b7b21e$var$BMI_CONSTANT % $54b47fc030b7b21e$var$STONE_TO_POUNDS);\n        const minIdealWeightInStone = bmiCategory.minBmi === -Infinity ? null : Math.trunc(bmiCategory.minBmi * Math.pow(heightInInches, $54b47fc030b7b21e$var$EXPONENT) / $54b47fc030b7b21e$var$BMI_CONSTANT / $54b47fc030b7b21e$var$STONE_TO_POUNDS);\n        const maxIdealWeightInStone = bmiCategory.maxBmi == Infinity ? null : Math.trunc(bmiCategory.maxBmi * Math.pow(heightInInches, $54b47fc030b7b21e$var$EXPONENT) / $54b47fc030b7b21e$var$BMI_CONSTANT / $54b47fc030b7b21e$var$STONE_TO_POUNDS);\n        this.#idealWeightRangesInStLbs = new Array(minIdealWeightInStone, minIdealWeightInPounds, maxIdealWeightInStone, maxIdealWeightInPounds);\n        return this.#idealWeightRangesInStLbs;\n    }\n    #getIdealWeightMessage() {\n        if (this.classification == $54b47fc030b7b21e$var$underWeight.category) this.idealWeightMessage = `${this.#getIdealWeightRangesInStAndLbs()[2]}st ${this.#getIdealWeightRangesInStAndLbs()[3]}lbs and below`;\n        else if (this.classification == $54b47fc030b7b21e$var$obese.category) this.idealWeightMessage = `${this.#getIdealWeightRangesInStAndLbs()[0]}st ${this.#getIdealWeightRangesInStAndLbs()[1]}lbs and above`;\n        else this.idealWeightMessage = `${this.#getIdealWeightRangesInStAndLbs()[0]}st ${this.#getIdealWeightRangesInStAndLbs()[1]}lbs - ${this.#getIdealWeightRangesInStAndLbs()[2]}st ${this.#getIdealWeightRangesInStAndLbs()[3]}lbs`;\n    }\n}\nclass $54b47fc030b7b21e$var$AppComponent {\n    #metricRadio = document.getElementById(\"metric\");\n    #imperialRadio = document.getElementById(\"imperial\");\n    #kgInput = document.getElementById(\"weight-in-kg\");\n    #cmInput = document.getElementById(\"height-in-cm\");\n    #stInput = document.getElementById(\"weight-in-stone\");\n    #lbsInput = document.getElementById(\"weight-in-pounds\");\n    #ftInput = document.getElementById(\"height-in-feet\");\n    #inInput = document.getElementById(\"height-in-inches\");\n    #metricGroup = document.getElementById(\"metric-inputs\");\n    #imperialGroup = document.getElementById(\"imperial-inputs\");\n    #displayResult = document.querySelector(\"div[class='display-result']\");\n    constructor(){\n        this.#metricRadio.addEventListener(\"change\", this.#selectUnit.bind(this));\n        this.#imperialRadio.addEventListener(\"change\", this.#selectUnit.bind(this));\n        this.#kgInput.addEventListener(\"input\", this.#handleValidationAndCalculation.bind(this));\n        this.#cmInput.addEventListener(\"input\", this.#handleValidationAndCalculation.bind(this));\n        this.#stInput.addEventListener(\"input\", this.#handleValidationAndCalculation.bind(this));\n        this.#lbsInput.addEventListener(\"input\", this.#handleValidationAndCalculation.bind(this));\n        this.#ftInput.addEventListener(\"input\", this.#handleValidationAndCalculation.bind(this));\n        this.#inInput.addEventListener(\"input\", this.#handleValidationAndCalculation.bind(this));\n    }\n    // Toggle the radio buttons functionality.\n    #selectUnit(evtObj) {\n        const selectedUnit = evtObj.target.value;\n        if (selectedUnit == $54b47fc030b7b21e$var$METRIC) {\n            this.#metricGroup.classList.add(\"active\");\n            this.#imperialGroup.classList.remove(\"active\");\n        }\n        if (selectedUnit == $54b47fc030b7b21e$var$IMPERIAL) {\n            this.#metricGroup.classList.remove(\"active\");\n            this.#imperialGroup.classList.add(\"active\");\n        }\n    }\n    // Handle input validation and calculation.\n    #handleValidationAndCalculation() {\n        let unit;\n        // So we need to know which radio button has been clicked to enable validate its respective input.\n        if (this.#metricRadio.checked) {\n            const kg = parseFloat(this.#kgInput.value.trim());\n            const cm = parseFloat(this.#cmInput.value.trim());\n            if (!isFinite(kg) || !isFinite(cm) || kg <= 0 || cm <= 0) {\n                this.#showErrorMessage(kg, this.#kgInput);\n                this.#showErrorMessage(cm, this.#cmInput);\n                return;\n            }\n            this.#removeErrorMessage(this.#cmInput, \"\");\n            this.#removeErrorMessage(this.#kgInput, \"\");\n            unit = $54b47fc030b7b21e$var$metricKgM(kg, cm);\n        }\n        if (this.#imperialRadio.checked) {\n            const st = parseFloat(this.#stInput.value.trim());\n            const lbs = parseFloat(this.#lbsInput.value.trim());\n            const ft = parseFloat(this.#ftInput.value.trim());\n            const inches = parseFloat(this.#inInput.value.trim());\n            if (st < 0 || lbs < 0 || ft < 0 || inches < 0 || st <= 0 && lbs <= 0 || ft <= 0 && inches <= 0 || !isFinite(st) || !isFinite(lbs) || !isFinite(ft) || !isFinite(inches)) {\n                this.#showErrorMessage(st, this.#stInput);\n                this.#showErrorMessage(lbs, this.#lbsInput);\n                this.#showErrorMessage(ft, this.#ftInput);\n                this.#showErrorMessage(inches, this.#inInput);\n                return;\n            }\n            this.#removeErrorMessage(this.#stInput, \"\");\n            this.#removeErrorMessage(this.#lbsInput, \"\");\n            this.#removeErrorMessage(this.#ftInput, \"\");\n            this.#removeErrorMessage(this.#inInput, \"\");\n            unit = $54b47fc030b7b21e$var$imperialKgM(st, lbs, ft, inches);\n        }\n        this.#renderDisplayResult(unit);\n    }\n    #removeErrorMessage(input, message) {\n        input.nextElementSibling.nextElementSibling.innerText = message;\n        input.setAttribute(\"aria-invalid\", \"false\");\n        input.nextElementSibling.nextElementSibling.setAttribute(\"hidden\", \"\");\n    }\n    #showErrorMessage(value, input) {\n        if (!isFinite(value)) {\n            this.#errorMessage(input, \"Enter a number\");\n            this.#resetDisplayResult();\n        } else if (value <= 0) {\n            this.#errorMessage(input, \"Must be greater than 0\");\n            this.#resetDisplayResult();\n        } else this.#removeErrorMessage(input, \"\");\n    }\n    #errorMessage(input, message) {\n        input.nextElementSibling.nextElementSibling.innerText = message;\n        input.setAttribute(\"aria-invalid\", \"true\");\n        input.nextElementSibling.nextElementSibling.removeAttribute(\"hidden\");\n    }\n    #resetDisplayResult() {\n        this.#displayResult.innerHTML = `\n    <p><strong>Welcome!</strong></p>\n    <p>\n      Enter your height and weight and you’ll see your BMI result here\n    </p>`;\n    }\n    #renderDisplayResult(unit) {\n        this.#displayResult.innerHTML = `\n    <div class=\"display-result__details\">\n      <p>Your BMI is... <br/><strong>${unit.BMI}</strong></p>\n      <p> Your BMI suggests you're ${unit.classification == \"healthy weight\" ? \"a\" : \"\"} ${unit.classification}. Your ideal weight is between   <strong>${unit.idealWeightMessage}</strong>.</p>\n    </div> \n  `;\n    }\n}\nnew $54b47fc030b7b21e$var$AppComponent();\n// Animations\nclass $54b47fc030b7b21e$var$BootStrapAnimation {\n    #section;\n    constructor(section){\n        this.#section = section;\n        this.#observeIntersection();\n    }\n    #handleIntersection(entries, observer) {\n        for (const entry of entries){\n            console.log(entry);\n            if (entry.isIntersecting) {\n                entry.target.classList.add(\"visible\");\n                observer.unobserve(entry.target);\n            }\n        }\n    }\n    #observeIntersection() {\n        const observerOptions = {\n            root: null,\n            rootMargin: \"0px\",\n            threshold: 0.3\n        };\n        const observer = new IntersectionObserver(this.#handleIntersection, observerOptions);\n        observer.observe(this.#section);\n    }\n}\nfunction $54b47fc030b7b21e$var$animateOnIt() {\n    const sections = document.querySelectorAll(\"section\");\n    for (const section of sections)new $54b47fc030b7b21e$var$BootStrapAnimation(section);\n}\n$54b47fc030b7b21e$var$animateOnIt();\n\n\n//# sourceMappingURL=index.a2b7eaee.js.map\n","// Here I want to initialize all the constants I will be working with.\nconst CM_TO_M = 1e2;\nconst EXPONENT = 2;\nconst STONE_TO_POUNDS = 14;\nconst POUNDS_TO_KILOGRAMS = 0.45359237;\nconst FOOT_TO_INCHES = 12;\nconst INCH_TO_METERS = 0.0254;\nconst M_TO_FEET = 3.28084;\nconst BMI_CONSTANT = 703;\nconst METRIC = \"metric\";\nconst IMPERIAL = \"imperial\";\n\n// Making use of Object-Oriented-Programming, I will be creating an objects that will group the BMI classification and the ranges\nclass BmiCategoryRange {\n  constructor(category, min, max) {\n    this.category = category;\n    this.minBmi = min;\n    this.maxBmi = max;\n  }\n}\n\nconst underWeight = new BmiCategoryRange(\"underweight\", -Infinity, 18.5);\nconst healthyWeight = new BmiCategoryRange(\"healthy weight\", 18.5, 24.9);\nconst overWeight = new BmiCategoryRange(\"overweight\", 25, 29.9);\nconst obese = new BmiCategoryRange(\"obese\", 30, Infinity);\n\n// I need to create a list of the ranges and their categories in an array. So an array of objects.\nconst bmiCategories = [underWeight, healthyWeight, overWeight, obese];\n\n// Create a function that does the conversion of the metric units to kg and meters\nfunction metricKgM(kilogram, centimeters) {\n  const kilograms = parseFloat(kilogram.toFixed(1));\n  const meters = parseFloat((centimeters / CM_TO_M).toFixed(2));\n  return new Metric(kilograms, meters);\n}\n\n// Create a function that does the conversion of the imperial units to hg and metres.\nfunction imperialKgM(stone, pounds, feet, inches) {\n  const kilograms = parseFloat(\n    ((stone * STONE_TO_POUNDS + pounds) * POUNDS_TO_KILOGRAMS).toFixed(1)\n  );\n  const meters = parseFloat(\n    ((feet * FOOT_TO_INCHES + inches) * INCH_TO_METERS).toFixed(2)\n  );\n  return new Imperial(kilograms, meters);\n}\n\n// Create a base class called Units since The Metric class and the Imperial but have some common functionalities\nclass Units {\n  constructor(weight, height) {\n    this._weight = weight;\n    this._height = height;\n    this._calcBMI();\n    this._getWeightClassification();\n  }\n\n  _calcBMI() {\n    this.BMI = parseFloat((this._weight / this._height ** EXPONENT).toFixed(1));\n  }\n\n  _getBmiCategory() {\n    for (const bmiCategory of bmiCategories) {\n      if (\n        (bmiCategory.minBmi === -Infinity || this.BMI >= bmiCategory.minBmi) &&\n        (bmiCategory.maxBmi === Infinity || this.BMI <= bmiCategory.maxBmi)\n      ) {\n        return bmiCategory;\n      }\n    }\n  }\n\n  _getWeightClassification() {\n    const bmiCategory = this._getBmiCategory();\n    this.classification = bmiCategory.category;\n  }\n\n  _getIdealWeightRangesInKgs() {\n    const bmiCategory = this._getBmiCategory();\n    const minIdealWeightInKg =\n      bmiCategory.minBMI === -Infinity\n        ? null\n        : parseFloat(\n            (bmiCategory.minBmi * this._height ** EXPONENT).toFixed(1)\n          );\n    const maxIdealWeightInKg = parseFloat(\n      bmiCategory.maxBMI === Infinity\n        ? null\n        : (bmiCategory.maxBmi * this._height ** EXPONENT).toFixed(1)\n    );\n    this._idealWeightRangesInKgs = new Array(\n      minIdealWeightInKg,\n      maxIdealWeightInKg\n    );\n    return this._idealWeightRangesInKgs;\n  }\n}\n\n// Metric\nclass Metric extends Units {\n  constructor(weight, height) {\n    super(weight, height);\n    this.#getIdealWeightMessage();\n  }\n\n  #getIdealWeightMessage() {\n    if (this.classification == underWeight.category) {\n      this.idealWeightMessage = `${\n        this._getIdealWeightRangesInKgs()[1]\n      }kgs and below`;\n    } else if (this.classification == obese.category) {\n      this.idealWeightMessage = `${\n        this._getIdealWeightRangesInKgs()[0]\n      }kgs and above`;\n    } else {\n      this.idealWeightMessage = `${this._getIdealWeightRangesInKgs()[0]}kgs - ${\n        this._getIdealWeightRangesInKgs()[1]\n      }kgs`;\n    }\n  }\n}\n\n// Imperial\nclass Imperial extends Units {\n  #feet;\n  #inches;\n  #idealWeightRangesInStLbs;\n  constructor(weight, height) {\n    super(weight, height);\n    this.#imperialHeightFtIn();\n    this.#getIdealWeightRangesInStAndLbs();\n    this.#getIdealWeightMessage();\n  }\n\n  #imperialHeightFtIn() {\n    const heightInFeet = this._height * M_TO_FEET;\n    // We need to extract the whole number of feet and the remaining inches\n    this.#feet = Math.floor(heightInFeet);\n    this.#inches = Math.round((heightInFeet - this.#feet) * FOOT_TO_INCHES);\n  }\n\n  #getIdealWeightRangesInStAndLbs() {\n    const bmiCategory = this._getBmiCategory();\n\n    // Convert the height to inches\n    const heightInInches = this.#feet * FOOT_TO_INCHES + this.#inches;\n\n    // Calculate the minimum and maximum ideal weights in pounds\n    const minIdealWeightInPounds =\n      bmiCategory.minBmi === -Infinity\n        ? null\n        : Math.trunc(\n            ((bmiCategory.minBmi * Math.pow(heightInInches, EXPONENT)) /\n              BMI_CONSTANT) %\n              STONE_TO_POUNDS\n          );\n    const maxIdealWeightInPounds =\n      bmiCategory.maxBmi === Infinity\n        ? null\n        : Math.trunc(\n            ((bmiCategory.maxBmi * Math.pow(heightInInches, EXPONENT)) /\n              BMI_CONSTANT) %\n              STONE_TO_POUNDS\n          );\n    const minIdealWeightInStone =\n      bmiCategory.minBmi === -Infinity\n        ? null\n        : Math.trunc(\n            (bmiCategory.minBmi * Math.pow(heightInInches, EXPONENT)) /\n              BMI_CONSTANT /\n              STONE_TO_POUNDS\n          );\n    const maxIdealWeightInStone =\n      bmiCategory.maxBmi == Infinity\n        ? null\n        : Math.trunc(\n            (bmiCategory.maxBmi * Math.pow(heightInInches, EXPONENT)) /\n              BMI_CONSTANT /\n              STONE_TO_POUNDS\n          );\n\n    this.#idealWeightRangesInStLbs = new Array(\n      minIdealWeightInStone,\n      minIdealWeightInPounds,\n      maxIdealWeightInStone,\n      maxIdealWeightInPounds\n    );\n    return this.#idealWeightRangesInStLbs;\n  }\n\n  #getIdealWeightMessage() {\n    if (this.classification == underWeight.category) {\n      this.idealWeightMessage = `${\n        this.#getIdealWeightRangesInStAndLbs()[2]\n      }st ${this.#getIdealWeightRangesInStAndLbs()[3]}lbs and below`;\n    } else if (this.classification == obese.category) {\n      this.idealWeightMessage = `${\n        this.#getIdealWeightRangesInStAndLbs()[0]\n      }st ${this.#getIdealWeightRangesInStAndLbs()[1]}lbs and above`;\n    } else {\n      this.idealWeightMessage = `${\n        this.#getIdealWeightRangesInStAndLbs()[0]\n      }st ${this.#getIdealWeightRangesInStAndLbs()[1]}lbs - ${\n        this.#getIdealWeightRangesInStAndLbs()[2]\n      }st ${this.#getIdealWeightRangesInStAndLbs()[3]}lbs`;\n    }\n  }\n}\n\nclass AppComponent {\n  #metricRadio = document.getElementById(\"metric\");\n  #imperialRadio = document.getElementById(\"imperial\");\n  #kgInput = document.getElementById(\"weight-in-kg\");\n  #cmInput = document.getElementById(\"height-in-cm\");\n  #stInput = document.getElementById(\"weight-in-stone\");\n  #lbsInput = document.getElementById(\"weight-in-pounds\");\n  #ftInput = document.getElementById(\"height-in-feet\");\n  #inInput = document.getElementById(\"height-in-inches\");\n  #metricGroup = document.getElementById(\"metric-inputs\");\n  #imperialGroup = document.getElementById(\"imperial-inputs\");\n  #displayResult = document.querySelector(\"div[class='display-result']\");\n\n  constructor() {\n    this.#metricRadio.addEventListener(\"change\", this.#selectUnit.bind(this));\n    this.#imperialRadio.addEventListener(\"change\", this.#selectUnit.bind(this));\n    this.#kgInput.addEventListener(\n      \"input\",\n      this.#handleValidationAndCalculation.bind(this)\n    );\n    this.#cmInput.addEventListener(\n      \"input\",\n      this.#handleValidationAndCalculation.bind(this)\n    );\n    this.#stInput.addEventListener(\n      \"input\",\n      this.#handleValidationAndCalculation.bind(this)\n    );\n    this.#lbsInput.addEventListener(\n      \"input\",\n      this.#handleValidationAndCalculation.bind(this)\n    );\n    this.#ftInput.addEventListener(\n      \"input\",\n      this.#handleValidationAndCalculation.bind(this)\n    );\n    this.#inInput.addEventListener(\n      \"input\",\n      this.#handleValidationAndCalculation.bind(this)\n    );\n  }\n\n  // Toggle the radio buttons functionality.\n  #selectUnit(evtObj) {\n    const selectedUnit = evtObj.target.value;\n\n    if (selectedUnit == METRIC) {\n      this.#metricGroup.classList.add(\"active\");\n      this.#imperialGroup.classList.remove(\"active\");\n    }\n\n    if (selectedUnit == IMPERIAL) {\n      this.#metricGroup.classList.remove(\"active\");\n      this.#imperialGroup.classList.add(\"active\");\n    }\n  }\n\n  // Handle input validation and calculation.\n  #handleValidationAndCalculation() {\n    let unit;\n\n    // So we need to know which radio button has been clicked to enable validate its respective input.\n    if (this.#metricRadio.checked) {\n      const kg = parseFloat(this.#kgInput.value.trim());\n      const cm = parseFloat(this.#cmInput.value.trim());\n\n      if (!isFinite(kg) || !isFinite(cm) || kg <= 0 || cm <= 0) {\n        this.#showErrorMessage(kg, this.#kgInput);\n        this.#showErrorMessage(cm, this.#cmInput);\n        return;\n      }\n\n      this.#removeErrorMessage(this.#cmInput, \"\");\n      this.#removeErrorMessage(this.#kgInput, \"\");\n\n      unit = metricKgM(kg, cm);\n    }\n\n    if (this.#imperialRadio.checked) {\n      const st = parseFloat(this.#stInput.value.trim());\n      const lbs = parseFloat(this.#lbsInput.value.trim());\n      const ft = parseFloat(this.#ftInput.value.trim());\n      const inches = parseFloat(this.#inInput.value.trim());\n\n      if (\n        st < 0 ||\n        lbs < 0 ||\n        ft < 0 ||\n        inches < 0 ||\n        (st <= 0 && lbs <= 0) ||\n        (ft <= 0 && inches <= 0) ||\n        !isFinite(st) ||\n        !isFinite(lbs) ||\n        !isFinite(ft) ||\n        !isFinite(inches)\n      ) {\n        this.#showErrorMessage(st, this.#stInput);\n        this.#showErrorMessage(lbs, this.#lbsInput);\n        this.#showErrorMessage(ft, this.#ftInput);\n        this.#showErrorMessage(inches, this.#inInput);\n        return;\n      }\n\n      this.#removeErrorMessage(this.#stInput, \"\");\n      this.#removeErrorMessage(this.#lbsInput, \"\");\n      this.#removeErrorMessage(this.#ftInput, \"\");\n      this.#removeErrorMessage(this.#inInput, \"\");\n\n      unit = imperialKgM(st, lbs, ft, inches);\n    }\n\n    this.#renderDisplayResult(unit);\n  }\n\n  #removeErrorMessage(input, message) {\n    input.nextElementSibling.nextElementSibling.innerText = message;\n    input.setAttribute(\"aria-invalid\", \"false\");\n    input.nextElementSibling.nextElementSibling.setAttribute(\"hidden\", \"\");\n  }\n\n  #showErrorMessage(value, input) {\n    if (!isFinite(value)) {\n      this.#errorMessage(input, \"Enter a number\");\n      this.#resetDisplayResult();\n    } else if (value <= 0) {\n      this.#errorMessage(input, \"Must be greater than 0\");\n      this.#resetDisplayResult();\n    } else {\n      this.#removeErrorMessage(input, \"\");\n    }\n  }\n\n  #errorMessage(input, message) {\n    input.nextElementSibling.nextElementSibling.innerText = message;\n    input.setAttribute(\"aria-invalid\", \"true\");\n    input.nextElementSibling.nextElementSibling.removeAttribute(\"hidden\");\n  }\n\n  #resetDisplayResult() {\n    this.#displayResult.innerHTML = `\n    <p><strong>Welcome!</strong></p>\n    <p>\n      Enter your height and weight and you’ll see your BMI result here\n    </p>`;\n  }\n\n  #renderDisplayResult(unit) {\n    this.#displayResult.innerHTML = `\n    <div class=\"display-result__details\">\n      <p>Your BMI is... <br/><strong>${unit.BMI}</strong></p>\n      <p> Your BMI suggests you're ${\n        unit.classification == \"healthy weight\" ? \"a\" : \"\"\n      } ${unit.classification}. Your ideal weight is between   <strong>${\n      unit.idealWeightMessage\n    }</strong>.</p>\n    </div> \n  `;\n  }\n}\n\nnew AppComponent();\n\n// Animations\nclass BootStrapAnimation {\n  #section;\n  constructor(section) {\n    this.#section = section;\n    this.#observeIntersection();\n  }\n\n  #handleIntersection(entries, observer) {\n    for (const entry of entries) {\n      console.log(entry);\n      if (entry.isIntersecting) {\n        entry.target.classList.add(\"visible\");\n        observer.unobserve(entry.target);\n      }\n    }\n  }\n\n  #observeIntersection() {\n    const observerOptions = {\n      root: null,\n      rootMargin: \"0px\",\n      threshold: 0.3,\n    };\n\n    const observer = new IntersectionObserver(\n      this.#handleIntersection,\n      observerOptions\n    );\n    observer.observe(this.#section);\n  }\n}\n\nfunction animateOnIt() {\n  const sections = document.querySelectorAll(\"section\");\n  for (const section of sections) {\n    new BootStrapAnimation(section);\n  }\n}\n\nanimateOnIt();\n"],"names":["$54b47fc030b7b21e$var$BmiCategoryRange","constructor","category","min","max","minBmi","maxBmi","$54b47fc030b7b21e$var$underWeight","Infinity","$54b47fc030b7b21e$var$healthyWeight","$54b47fc030b7b21e$var$overWeight","$54b47fc030b7b21e$var$obese","$54b47fc030b7b21e$var$bmiCategories","$54b47fc030b7b21e$var$Units","weight","height","_weight","_height","_calcBMI","_getWeightClassification","BMI","parseFloat","toFixed","_getBmiCategory","bmiCategory","classification","_getIdealWeightRangesInKgs","minIdealWeightInKg","minBMI","maxIdealWeightInKg","maxBMI","_idealWeightRangesInKgs","$54b47fc030b7b21e$var$Metric","getIdealWeightMessage","idealWeightMessage","$54b47fc030b7b21e$var$Imperial","feet","inches","idealWeightRangesInStLbs","imperialHeightFtIn","getIdealWeightRangesInStAndLbs","heightInFeet","Math","floor","round","heightInInches","minIdealWeightInPounds","trunc","pow","maxIdealWeightInPounds","minIdealWeightInStone","maxIdealWeightInStone","$54b47fc030b7b21e$var$AppComponent","metricRadio","document","getElementById","imperialRadio","kgInput","cmInput","stInput","lbsInput","ftInput","inInput","metricGroup","imperialGroup","displayResult","querySelector","addEventListener","selectUnit","bind","handleValidationAndCalculation","evtObj","selectedUnit","target","value","classList","add","remove","unit","checked","kg","trim","cm","isFinite","showErrorMessage","removeErrorMessage","$54b47fc030b7b21e$var$metricKgM","kilogram","centimeters","kilograms","meters","st","lbs","ft","$54b47fc030b7b21e$var$imperialKgM","stone","pounds","renderDisplayResult","input","message","nextElementSibling","innerText","setAttribute","errorMessage","resetDisplayResult","removeAttribute","innerHTML","$54b47fc030b7b21e$var$BootStrapAnimation","section","observeIntersection","handleIntersection","entries","observer","entry","console","log","isIntersecting","unobserve","IntersectionObserver","root","rootMargin","threshold","observe","$54b47fc030b7b21e$var$animateOnIt","sections","querySelectorAll"],"version":3,"file":"index.a2b7eaee.js.map"}